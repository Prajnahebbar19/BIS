# -*- coding: utf-8 -*-
"""Particle_Swam_optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18RjiaR16dAfvDIYYuAv_A4mjMiCelv44
"""

import numpy as np

class Particle:
    def __init__(self, bounds):
        self.position = np.random.uniform(bounds[0], bounds[1])
        self.velocity = np.random.uniform(-1, 1)
        self.bestPos = self.position
        self.bestFitness = float('inf')

def fitness_function(x):
    # Example fitness function: Sphere function
    return x**2

def pso(num_particles, bounds, max_iter, w, C1, C2):
    particles = [Particle(bounds) for _ in range(num_particles)]
    best_pos_swarm = None
    best_fitness_swarm = float('inf')

    for iter in range(max_iter):
        for particle in particles:
            # Calculate fitness
            fitness = fitness_function(particle.position)

            # Update personal best
            if fitness < particle.bestFitness:
                particle.bestFitness = fitness
                particle.bestPos = particle.position

            # Update global best
            if fitness < best_fitness_swarm:
                best_fitness_swarm = fitness
                best_pos_swarm = particle.position

            # Update velocity and position
            r1, r2 = np.random.rand(2)
            particle.velocity = (w * particle.velocity +
                                 r1 * C1 * (particle.bestPos - particle.position) +
                                 r2 * C2 * (best_pos_swarm - particle.position))
            particle.position += particle.velocity

            # Clip position to bounds
            particle.position = np.clip(particle.position, bounds[0], bounds[1])

    return best_pos_swarm, best_fitness_swarm

# Parameters
num_particles = 30
bounds = (-10, 10)
max_iter = 100
w = 0.5
C1 = 1.5
C2 = 1.5

best_position, best_fitness = pso(num_particles, bounds, max_iter, w, C1, C2)
print(f"Best Position: {best_position}, Best Fitness: {best_fitness}")